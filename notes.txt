Schedule
    Commence : 9:30
    Tea Break : 11:00 (20 mins)
    Lunch Break : 13:00 (60 mins)
    Tea Break : 15:30 (20 mins)
    Wind up : 17:30 

Your Name
Total Experience
Primary Skillset
Experience in Golang (if any)


Why Go?
    Better syntax
    Performance
    Multithreading is easier
    Backedup Google

Simplicity
    25 Keywords
        package, func, struct, interface, defer, go, var, if, else, switch, case, for, select, chan, make, new, close, map
    No classes
    No Inheritance ( prefer composition over Inheritance)
    No access modifiers
    No exceptions (only errors)

Close to hardware
    - Performance

Built for concurrency
    - Language features for concurrency
        go, chan, select, close
    - Builtin scheduler
    - No exceptions (only errors)
    - Efficient
        1000s of goroutines in 1 single thread


golang.org
visual studio code (http://code.visualstudio.com)

go run hello-world.go
    OR
go build hello-world.go
./hello-world

data types in go
    bool
    string

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 (real float32, imaginary float32)
    complex126 (real float64, imaginary float64)

    byte (alias for uint8)
    rune (alias for int32, represents 1 unicode character)

programming constructs
    if else, switch, for, func

Find the first 50 prime numbers starting from 2

Higher Order Functions
    treat functions like data
        assign functions to variables
        pass functions are arguments to other functions
        return a function as return result from another function

Modules
    to create a module
        go mod init <module_name>

    to use a third party module
        go get github.com/fatih/color

    to update a third party module
        go get -u github.com/fatih/color

    to include a private module (not in the respository)
        in the go.mod file, add the following line
            replace dummyModule => ../dummyModule

Collections
    Array
        Fixed size
        All the data must of the same type
        Values can be accessed using an indexer
        size of the array - using the len function
        Can use the 'range' construct to iterate through an array as well
    Slice
        Varying size
        Wrapper for an array
        All the data must of the same type
        Values can be accessed using an indexer
        size of the array - using the len function
        Can use the 'range' construct to iterate through an array as well 
    Map
        collection of key/value pairs
        key has to be unique
        the datatype of key & value can be defined


Assignment
Find out the list of primeNumbers and the list of Even numbers from a list of 50 random numbers
    - 
Create a CLI based calculator
    Display a menu
        1. Add
        2. Subtract
        3. Multiply
        4. Divide
        5. Exit
    If the user enter any choice other than 1 - 4
        exit from the application
    else
        accept two operands from the user
        perform the selected operation
        print the result
        display the menu once again
    

Object = encapsulation of state & behavior


Create a list of products and utility functions for the following
    addProduct => to add a new product to the list
    IndexOf => return index of the given product in the list (returns -1 if doesnt exist)
    Includes => return true/false depending on whether the given product exists in the list
    Any => return true if ANY of the product satisfies the given criteria, else false
    All => return true if ALL products in the list satisfies the given criteria, elase false
    Filter => return the list of products that satisfies the given criteria


Implement "Sort" functionality for the Products
    1. Must use the  sort.Sort() for sorting (sort the products by id by default)
    2. Have provisions so that the user can sort the products by other attributes as well (name, cost, units, category etc)

   

   for i:=0; i < len(list)-1; i++ {
       for j:=0; j < len(list); j++ {
           if list[i].Id > list[j].Id {
               list[i], list[j] = list[j], list[i]
           }
       }
   }

interprocess communication
    native
        Java (RMI)
        .NET (.NET Remoting)
    CORBA
    Web
        http
            stateless protocol
            frequent polling for getting near realtime data from the server
            text
        tcp
        XML 
        JSON

        HTML5
            Server Sent Event (one way communication between the server and the client)
            WebSockets (realtime bidirectional communication )


Microservices

gRPC
    http2 
    tcp
    communication patters supported
        request / response
        Server streaming
        Client streaming
        Client & Server streaming
    binary format
    protocol buffers

Installing the tools
go get -u github.com/golang/protobuf/protoc-gen-go
go get -u google.golang.org/grpc